// Gradle build script for the j-ogg-all project

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

description = 'J-Ogg is a collection of Java libraries for reading Ogg files and decoding different contained formats.\n\
        At the moment the support for Vorbis and FLAC is almost complete (the library decodes all files created by the\n\
        current versions of libvorbis and libflac correctly) and I\'ve started working on Theora support.'
ext {
    group = 'com.github.stephengold'
    artifact = 'j-ogg-all'
    version = '1.0.2-SNAPSHOT'
    baseName = "${artifact}-${version}"
    websiteUrl = 'https://github.com/stephengold/j-ogg-all'
}

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

dependencies {
    implementation 'javax.media:jmf:2.1.1e'
}

tasks.withType(JavaCompile) { // Java compile-time options:
    options.compilerArgs << '-Xdiags:verbose'
    //options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
    options.encoding = 'UTF-8'
}

javadoc {
    // Disable doclint for JDK8+.
    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

repositories {
    //mavenLocal()
    mavenCentral()
}

// publishing tasks

task('install') {
    dependsOn 'publishMavenPublicationToMavenLocal'
    description 'Installs Maven artifacts to the local repository.'
}
task('release') {
    dependsOn 'publishMavenPublicationToOSSRHRepository'
    description 'Stages Maven artifacts to Sonatype OSSRH.'
}

jar {
    archiveBaseName = project.ext.baseName
}
task javadocJar(type: Jar) {
    archiveBaseName = project.ext.baseName
    archiveClassifier = 'javadoc'
    dependsOn 'javadoc'
    description 'Creates a JAR of javadoc.'
    from javadoc.destinationDir
}
task sourcesJar(type: Jar) {
    archiveBaseName = project.ext.baseName
    archiveClassifier = 'sources'
    description 'Creates a JAR of sourcecode.'
    from sourceSets.main.allJava
}

build.dependsOn('pom', 'pomAsc')
task('pom', type: Copy) {
    dependsOn 'generatePomFileForMavenPublication'
    description 'Copies the Maven POM to build/libs.'
    from "${buildDir}/publications/maven/pom-default.xml"
    into "${buildDir}/libs"
    rename 'pom-default.xml', project.ext.baseName + '.pom'
}
task('pomAsc', type: Copy) {
    dependsOn 'signMavenPublication'
    description 'Copies the signature of the Maven POM to build/libs.'
    from "${buildDir}/publications/maven/pom-default.xml.asc"
    into "${buildDir}/libs"
    rename 'pom-default.xml.asc', project.ext.baseName + '.pom.asc'
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact javadocJar
            artifact sourcesJar
            artifactId artifact
            from components.java
            groupId project.ext.group
            pom {
                description = project.description
                developers {
                    developer {
                        name = 'Tor-Einar Jarnbjo'
                    }
                }
                inceptionYear = '2002'
                licenses {
                    license {
                        distribution = 'repo'
                        name = 'Free and commercial use, modification and redistribution with attribution.'
                        url = project.ext.websiteUrl + '/blob/master/LICENSE'
                    }
                }
                name = project.ext.group + ':' + artifact
                scm {
                    connection = 'scm:git:git://github.com/stephengold/j-ogg-all.git'
                    developerConnection = 'scm:git:ssh://github.com:stephengold/j-ogg-all.git'
                    url = project.ext.websiteUrl + '/tree/master'
                }
                url = project.ext.websiteUrl
            }
            version project.ext.version
        }
    }
    // Staging to OSSRH relies on the existence of 2 properties
    // (ossrhUsername and ossrhPassword)
    // which should be stored in ~/.gradle/gradle.properties
    repositories {
        maven {
            credentials {
                username = project.hasProperty('ossrhUsername') ? ossrhUsername : 'Unknown user'
                password = project.hasProperty('ossrhPassword') ? ossrhPassword : 'Unknown password'
            }
            name = 'OSSRH'
            url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
        }
    }
}
generateMetadataFileForMavenPublication.dependsOn('pom')
publishMavenPublicationToMavenLocal.doLast {
    println 'installed locally as ' + project.ext.baseName
}

// signing tasks

// Signing relies on the existence of 3 properties
// (signing.keyId, signing.password, and signing.secretKeyRingFile)
// which should be stored in ~/.gradle/gradle.properties

signing {
    sign publishing.publications.maven
}
tasks.withType(Sign) {
    onlyIf { project.hasProperty('signing.keyId') }
}
